syntax="proto3";

package relation;

option go_package="/relation";

import "idl/douyin/common.proto";
import "idl/google/api/annotations.proto";


message RelationActionRequest {
  string token = 1;
  int64 to_user_id = 2;
  int64 action_type = 3;
}

message RelationActionResponse {}

message RelationFollowListRequest {
  string token = 1;
}

message RelationFollowListResponse {
  repeated common.User user_list = 1;
}

message RelationFollowerListRequest {
  string token = 1;
}

message RelationFollowerListResponse {
  repeated common.User user_list = 1;
}

message RelationFriendListRequest {
  string token = 1;
}

message RelationFriendListResponse {
  repeated FriendUser user_list = 1;
}

message FriendUser {
  common.User user = 1;
  string message = 2; // latest chat messages with this friend
  int64 msgType = 3; // message type，0 - Messages currently requested by the user，1 - Messages sent by the current requesting user
}

message RelationFollowCountRequest {
  int64 user_id = 1;
}

message RelationFollowCountResponse {
  int64 follow_count = 1;
  int64 follower_count = 2;
}

message RelationIsFollowRequest {
  int64 user_id = 1;
  int64 to_user_id = 2;
}

message RelationIsFollowResponse {
  bool is_follow = 1;
}

service RelationService {
  rpc RelationAction(RelationActionRequest) returns (RelationActionResponse) {
    option (google.api.http) = {
      post: "/api/relation/action"
      body: "*"
    };
  }
  rpc RelationFollowList(RelationFollowListRequest) returns (RelationFollowListResponse) {
    option (google.api.http) = {
      get: "/api/relation/follow/list"
    };
  }
  rpc RelationFollowerList(RelationFollowerListRequest) returns (RelationFollowerListResponse) {
    option (google.api.http) = {
      get: "/api/relation/follower/list"
    };
  }
  rpc RelationFriendList(RelationFriendListRequest) returns (RelationFriendListResponse) {
    option (google.api.http) = {
      get: "/api/relation/friend/list"
    };
  }
  rpc RelationFollowCount(RelationFollowCountRequest) returns (RelationFollowCountResponse);
  rpc RelationIsFollow(RelationIsFollowRequest) returns (RelationIsFollowResponse);
}